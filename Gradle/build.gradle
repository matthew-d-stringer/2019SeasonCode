plugins {
    id "java"
    // id "edu.wpi.first.GradleRIO" version "2018.06.21"
    id "edu.wpi.first.GradleRIO" version "2019.0.0-alpha-3"
}

def ROBOT_CLASS = "robot.Robot"

repositories{
    mavenCentral()
}

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        target("roborio", edu.wpi.first.gradlerio.frc.RoboRIO) {
            // Team can be overridden by command line, for use with VSCode
            team = getTeamOrDefault(3250)
        }
    }
    artifacts {
        artifact('frcJava', edu.wpi.first.gradlerio.frc.FRCJavaArtifact) {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = getDebugOrDefault(false)
        }
        fileTreeArtifact('frcStaticFileDeploy'){
            files = fileTree(dir: 'src/deploy')
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}

// Defining my dependencies. In this case, WPILib (+ friends)
dependencies {
    // compile fileTree(include: ['*.jar'], dir: 'libs')
    compile files('libs/core.jar')
    compile files('libs/json-simple-1.1.1.jar')
    compile wpilib()
    compile ctre()
    compile navx()

    //testCompile files('libs/junit-4.10.jar')

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.1.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.1.1'
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_CLASS)
}

// task wrapper(type: Wrapper) {
wrapper {
    gradleVersion = '4.9'
}

test {
	useJUnitPlatform()
}
